{"version":3,"sources":["components/TopicVoter.tsx","util.ts","pages/MainPage.tsx","App.tsx","serviceWorker.js","index.js"],"names":["props","css","width","textAlign","fontSize","name","minHeight","margin","background","color","display","justifyContent","topic","map","item","TopicVoter","App","basename","process","exact","path","component","MainPage","Component","Boolean","window","location","hostname","match","AppWithRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAKe,WAACA,GACZ,OACI,mBAAKC,IAAK,CAAEC,MAAO,QAASC,UAAW,WACnC,mBAAKF,IAAG,gBCRUC,EDSC,ICTyB,sBAAN,OAA6BA,EAA7B,QDSZ,CAAEE,SAAU,WAEjCJ,EAAMK,MAEX,mBAAKJ,IAAK,CAAEK,UAAW,QAASC,OAAQ,SAAUC,WAAYR,EAAMS,OAAS,YCb5D,IAACP,GCKf,aACX,OAAQ,mBAAKD,IAAK,CAAEM,OAAQ,qBACxB,kBAAIN,IAAK,CAAEM,OAAQ,SACf,oBAAMN,IAAK,CAAEG,SAAU,UAAvB,8CAGA,oBAAMH,IAAK,CAAEM,OAAQ,SAAUH,SAAU,UAAzC,4BAGA,oBAAMH,IAAK,CAAEG,SAAU,UAAvB,oCAIJ,mBAAKH,IAAK,CAACS,QAAS,OAAQC,eAAgB,kBACvCC,EAAMC,KAAI,SAAAC,GACP,OAAQ,YAACC,EAAD,CAAYV,KAAMS,EAAKT,KAAMI,MAAOK,EAAKL,cAM3DG,EAAQ,CACV,CACIP,KAAM,mDACNI,MAAO,WAEX,CACIJ,KAAM,mDACNI,MAAO,WAEX,CACIJ,KAAM,mDACNI,MAAO,WAEX,CACIJ,KAAM,yDACNI,MAAO,WAEX,CACIJ,KAAM,uCACNI,MAAO,WAEX,CACIJ,KAAM,yDACNI,MAAO,WAEX,CACIJ,KAAM,qEACNI,MAAO,WAEX,CACIJ,KAAM,+DACNI,MAAO,WAEX,CACIJ,KAAM,mDACNI,MAAO,SC1CAO,E,uKAVX,OACE,uBACE,YAAC,IAAD,CAAYC,SAAUC,YACpB,YAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,U,GALzBC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAgB,kBAClB,kBAAC,IAAD,KACE,kBAAC,EAAD,QAINC,IAASC,OAAO,kBAAC,EAAD,MAAmBC,SAASC,eAAe,SDoHrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bba903f0.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport React from 'react';\nimport { mediaMaxWidth } from '../util';\n\nexport default (props: { name: string, color: string}) => {\n    return (\n        <div css={{ width: '120px', textAlign: 'center'}}>\n            <div css={{\n                [mediaMaxWidth(768)]: { fontSize: '0.8em' }\n            }}>\n                {props.name}\n            </div>\n            <div css={{ minHeight: '300px', margin: '10px 0', background: props.color || 'white' }}></div>\n        </div>\n    );\n}","export const mediaMaxWidth = (width: number) => { return `@media (max-width: ${width}px)` }","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport React from 'react';\nimport TopicVoter from '../components/TopicVoter';\n\nexport default () => {\n    return (<div css={{ margin: '20vh 100px 100px'}}>\n        <h1 css={{ margin: '50px'}}>\n            <span css={{ fontSize: '2.5em' }}>\n                อยากให้\n            </span>\n            <span css={{ margin: '0 30px', fontSize: '4.5em'}}>\n                ภาษี\n            </span>\n            <span css={{ fontSize: '2.5em' }}>\n                ไปไหน?\n            </span>\n        </h1>\n        <div css={{display: 'flex', justifyContent: 'space-between'}}>\n            {topic.map(item => {\n                return (<TopicVoter name={item.name} color={item.color} />);\n            })}\n        </div>\n    </div>);\n};\n\nconst topic = [\n    {\n        name: 'การศึกษา',\n        color: '#9a4dff'\n    },\n    {\n        name: 'เศรษฐกิจ',\n        color: '#4d5bff'\n    },\n    {\n        name: 'การเกษตร',\n        color: '#4dd6ff'\n    },\n    {\n        name: 'สาธารณสุข',\n        color: '#4dffc5'\n    },\n    {\n        name: 'คมนาคม',\n        color: '#ffe94e'\n    },\n    {\n        name: 'เทคโนโลยี',\n        color: '#ffa447'\n    },\n    {\n        name: 'สิ่งแวดล้อม',\n        color: '#ff6947'\n    },\n    {\n        name: 'ความมั่นคง',\n        color: '#ff4747'\n    },\n    {\n        name: 'ยุติธรรม',\n        color: '#999'\n    },\n]","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport UnderDevelopment from './components/UnderDevelopment';\nimport MainPage from './pages/MainPage';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <HashRouter basename={process.env.PUBLIC_URL}>\n          <Route exact path='/' component={MainPage} />\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst AppWithRouter = () => (\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n)\n  \nReactDOM.render(<AppWithRouter />, document.getElementById('root'))\nserviceWorker.unregister();\n"],"sourceRoot":""}